import telebot
import json
import numpy
import requests
from telebot.types import Message
import pandas as pd
import matplotlib
from matplotlib import pyplot as plt
from datetime import date
import pprint as pp

TOKEN = '1237869167:AAHlSqvq9Kw5Me9g4zrCAaaVya_yCLe9s80'

bot = telebot.TeleBot(TOKEN)

#if false - sum , if true - mult
mult_flag = False
user_state={}
matplotlib.use('agg')

def get_bitcoin_price():
    TICKER_API_URL = 'https://api.coindesk.com/v1/bpi/currentprice.json'

    response = requests.get(TICKER_API_URL)
    response_json = response.json()

    bitcoin_price = response_json['bpi']['USD']['rate_float']
    bitcoin_date =  response_json['time']['updated']
    return f'Bitcoin price: {bitcoin_price} USD\nDate: {bitcoin_date}\n–ß—Ç–æ–±—ã –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –æ—Ç –¥—Ä—É–≥–æ–π –¥–∞—Ç—ã –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ\n/btc YYYY-MM-DD'

def get_bitcoin_timeseries(start_date, end_date,title):
    TICKER_API_URL = f'https://api.coindesk.com/v1/bpi/historical/close.json?start={start_date}&end={end_date}'

    response = requests.get(TICKER_API_URL)
    response_json = response.json()
    output_dict=response_json['bpi']
    data_set = pd.DataFrame.from_dict(output_dict, orient = "index").reset_index()
    data_set.columns = ['Date', 'Price']
    data_set.plot(x='Date', y='Price')
    plt.grid()
    plt.title('Special for ' + title + '\n–ì—Ä–∞—Ñ–∏–∫ —Å—Ç—Ä–æ–∏–ª—Å—è –æ—Ç ' + str(start_date))
    plt.xticks(rotation=90)
    plt.savefig('Price_plot.png')

def sum_or_mult(list, mult_flag):
    try:
        if ';' in list:
            numbers_list = [float(el) for el in list.split(';')]
        else:
            numbers_list = [float(el) for el in list.split()]
        if mult_flag:
            return numpy.prod(numbers_list)
        else:
            return sum(numbers_list)
    except:
        return "ü§¶‚Äç‚ôÇÔ∏è–≠—Ç–æ —Ç–µ–∫—Å—Ç, –∞ –Ω–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∞ –∫–æ–º–∞–Ω–¥—É –Ω—É–∂–Ω–æ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–∞–∂–∞–≤ /"

@bot.message_handler(commands=['start'])
def send_welcome(message: Message):
    global user_state
    bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}\n\nC–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –∫–æ–º–∞–Ω–¥—É:\n   ‚ûï—Å–ª–æ–∂–µ–Ω–∏–µ /sum\n   ‚úñÔ∏è—É–º–Ω–æ–∂–µ–Ω–∏–µ /mult. \n–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–π –±–æ—Ç—É —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ ; , –∞ –æ–Ω –±—É–¥–µ—Ç –∏—Ö —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ —Å–∫–ª–∞–¥—ã–≤–∞—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–º–Ω–æ–∂–∞—Ç—å\n\n –ö–æ–º–∞–Ω–¥–∞ /btc –≤—ã–¥–∞—Å—Ç —Ü–µ–Ω—É –±–∏—Ç–∫–æ–∏–Ω–∞')
    user_state[message.from_user.id]=False
    with open('log_svblv_bot.txt','a') as f:
        print(f'User: {message.from_user.first_name} Message: {message.text}',file = f)

@bot.message_handler(commands=['sum'])
def change_flag(message: Message):
    global user_state
    user_state[message.from_user.id] =False
    bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ ; , –±–æ—Ç –∏—Ö —Å–ª–æ–∂–∏—Ç:\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n\n1 2 3 4 5\n–∏–ª–∏\n1;2;3;4;5')
    with open('log_svblv_bot.txt','a') as f:
        print(f'User: {message.from_user.first_name} Message: {message.text}',file = f)

@bot.message_handler(commands=['mult'])
def change_flag(message: Message):
    global user_state
    user_state[message.from_user.id] = True
    bot.send_message(message.chat.id, '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª, –∏–ª–∏ —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ ; , –±–æ—Ç –∏—Ö –ø–µ—Ä–µ–º–Ω–æ–∂–∏—Ç:\n–ù–∞–ø—Ä–∏–º–µ—Ä:\n\n1 2 3 4 5\n–∏–ª–∏\n1;2;3;4;5')
    with open('log_svblv_bot.txt','a') as f:
        print(f'User: {message.from_user.first_name} Message: {message.text}',file = f)

@bot.message_handler(commands=['btc'])
def change_flag(message: Message):
   
    message_text = message.text
    if len(message_text.split())==1:
       start_date = '2018-01-01'
    else:
       start_date = message_text.split()[1]

    output = get_bitcoin_price()+ '\n\nPowered by CoinDesk\nhttps://www.coindesk.com/price/bitcoin'

    try:
        start_date = date.fromisoformat(start_date)
       
            
        get_bitcoin_timeseries(start_date, date.today(),message.from_user.first_name)
        with open('Price_plot.png','rb') as f:
            bot.send_photo(message.chat.id,f,caption=output)

        with open('log_svblv_bot.txt','a') as f:
                old_str='\n'
                new_str=''
                print(f'User: {message.from_user.first_name} Message: {message.text}, Response: {output.replace(old_str,new_str)}',file = f)
   
    except:
        bot.send_message(message.chat.id, output + '\n\n–ì—Ä–∞—Ñ–∏–∫–∞ –Ω–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –¥–∞—Ç–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–∫–æ–π: /btc 2018-01-01, –∞ –≤—ã –≤–≤–µ–ª–∏:\n{message.text}')
        with open('log_svblv_bot.txt','a') as f:
            old_str='\n'
            new_str=''
            print(f'User: {message.from_user.first_name} Message: {message.text}, Response: {output.replace(old_str,new_str)}',file = f)



@bot.message_handler(func = lambda message: True)
def result(message: Message):
    global mult_flag
    global user_state
    if user_state.get(message.from_user.id) is not None:
        output = sum_or_mult(message.text,user_state[message.from_user.id])
    else:
        output = '–Ø –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏–ª –±–æ—Ç–∞. –ù–∞–∂–º–∏ –µ—â–µ —Ä–∞–∑\n/start'
    bot.send_message(message.chat.id , output)
    with open('log_svblv_bot.txt','a') as f:
        print(f'User: {message.from_user.first_name} Message: {message.text}, Response: {output}',file = f)

bot.polling()
